

# This file was *autogenerated* from the file bgcd-db.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)# http://facthacks.cr.yp.to/batchgcd.html

import csv

def batchgcd_faster(X):
    prods = producttree(X)
    R = prods.pop()
    while prods:
        X = prods.pop()
        R = [R[floor(i // _sage_const_2 )] % X[i] ** _sage_const_2  for i in range(len(X))]
    return [gcd(r // n, n) for r, n in zip(R, X)]

def producttree(X):
    result = [X]
    while len(X) > _sage_const_1 :
        X = [prod(X[i * _sage_const_2 :(i + _sage_const_1 ) * _sage_const_2 ]) for i in range((len(X) + _sage_const_1 ) // _sage_const_2 )]
        result.append(X)
    return result

def remaindersusingproducttree(n, T):
    result = [n]
    for t in reversed(T):
        result = [result[floor(i // _sage_const_2 )] % t[i] for i in range(len(t))]
    return result

def remainders(n, X):
    return remaindersusingproducttree(n, self.producttree(X))

with open("toCrack10.csv", "r", encoding="utf-8") as csv_file:
    csv_reader = csv.reader(csv_file, delimiter=',')
    moduli = [ZZ(line[_sage_const_0 ]) for line in csv_reader]
    csv_file.seek(_sage_const_0 )
    csv_reader = csv.reader(csv_file, delimiter=',')
    files = [line[_sage_const_1 ] for line in csv_reader]
    print(files)
    res = batchgcd_faster(moduli)
    match = [x for x in zip(moduli, res, files) if x[_sage_const_1 ] != _sage_const_1  and x[_sage_const_0 ] != x[_sage_const_1 ]]

with open('vulnerableKeys.csv','w') as out:
    csv_out = csv.writer(out)
    for row in match:
        csv_out.writerow(row)

